#include <stdio.h>
#include <stdlib.h>

struct Node;
typedef struct Node* PtrToNode;
typedef PtrToNode Stack;
typedef int ElementType;

int IsEmpty(Stack S);
Stack CreateStack(void);
void MakeEmpty(Stack S);
void Push(ElementType X, Stack S);
ElementType Pop(Stack S);

struct Node
{
    ElementType Element;
    PtrToNode Next;
};

int IsEmpty(Stack S)
{
    return S->Next == NULL;
}

Stack CreateStack(void)
{
    Stack S;
    S = malloc(sizeof(struct Node));
    S -> Next = NULL;
    MakeEmpty(S);
    return S;
}

void MakeEmpty(Stack S)
{
    if(S == NULL)
        printf("Please use CreateStack first!");
    else
        while(!IsEmpty(S))
            Pop(S);
}

void Push(ElementType X, Stack S)
{
    PtrToNode  TmpCell;
    TmpCell = malloc(sizeof(struct Node));
    TmpCell->Element = X;
    TmpCell->Next = S->Next;
    S->Next = TmpCell;
}

ElementType Pop(Stack S)
{
    PtrToNode TmpCell;
    if(IsEmpty(S))
    {
        printf("Error: Empty Stack");
        return NULL;
    }
    else
    {
        TmpCell = S->Next;
        S->Next = TmpCell->Next;
        ElementType X = TmpCell->Element;
        free(TmpCell);
        return X;
    }
}

PrintStack(Stack S)
{
    while(!IsEmpty(S))
    {
        printf("%d,",Pop(S));
    }
}

int main()
{
    Stack S = CreateStack();
    int array[6] = {1, 1, 2, 3, 5, 8};
    printf("Push 1,1,2,3,5,8 to the stack: \n");
    for(int i = 0; i < 6; i++)
    {
        Push(array[i], S);
    }
    PrintStack(S);
    return 0;
}
