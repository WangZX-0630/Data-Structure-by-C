#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define Cutoff 20

void QuickSort(int A[], int N);
int Median3(int A[], int Left, int Right);
void QSort(int A[], int Left, int Right);
void InsertionSort(int A[], int N);

void Swap(int *a, int *b) {
    int tmp = *a;
    *a = *b;
    *b = tmp;
}

void InsertionSort(int A[], int N) {
    int j, tmp;
    for(int i = 1; i < N; ++i) {
        tmp = A[i];
        for(j = i; j > 0 && A[j - 1] > tmp; --j) {
            A[j] = A[j - 1];
        }
        A[j] = tmp;
    }
}

void QuickSort(int A[], int N) {
    QSort(A, 0, N - 1);
}

int Median3(int A[], int Left, int Right) {
    int Center = (Left + Right) / 2;
    if(A[Left] > A[Center]) {
        Swap(&A[Left], &A[Center]);
    }
    if(A[Left] > A[Right]) {
        Swap(&A[Left], &A[Right]);
    }
    if(A[Center] > A[Right]) {
        Swap(&A[Center], &A[Right]);
    }
    Swap(&A[Center], &A[Right - 1]);
    return A[Right - 1];
}

void QSort(int A[], int Left, int Right) {
    int i, j;
    int Pivot;
    if(Left + Cutoff <= Right) {
        Pivot = Median3(A, Left, Right);
        i = Left;
        j = Right - 1;
        for(;;) {
            while(A[++i] < Pivot) {}
            while(A[--j] > Pivot) {}
            if(i < j) {
                Swap(&A[i], &A[j]);
            }
            else break;
        }
        Swap(&A[i], &A[Right - 1]);
        QSort(A, Left, i - 1);
        QSort(A, i + 1, Right);
    }
    else {
        InsertionSort(A + Left, Right - Left + 1);
    }
}

void AddRandNum(int array[], int N) {
    srand((unsigned)time(NULL));
    for(int i = 0; i < N; ++i) {
        array[i] = rand() % (N * 10);
    }
}

void test(int array[], int N) {
    QuickSort(array, N);
    /*for(int i = 0; i < N; ++i) {
        printf("%d,",array[i]);
    }*/
}

int main()
{
    int N = 1000000;
    int array[N];
    AddRandNum(array, N);
    clock_t start, finish;
    start = clock();
    test(array, N);
    finish = clock();
    printf("\nProcessing time: %1f ms\n",(double)(finish - start) / 1000);
    return 0;
}

/* On my computer, it costs about 0.1s to sort 100w numbers with QuickSort */
/* Quick Sort:
        Space Complexity: O(log(n))
        Time Complexity: O(n * log(n))
        Stability: unstable
*/
