#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node;
typedef struct Node* PtrToNode;
typedef PtrToNode Stack;
typedef char ElementType;

int IsEmpty(Stack S);
Stack CreateStack(void);
void MakeEmpty(Stack S);
void Push(ElementType X, Stack S);
ElementType Pop(Stack S);

struct Node
{
    ElementType Element;
    PtrToNode Next;
};

int IsEmpty(Stack S)
{
    return S->Next == NULL;
}

Stack CreateStack(void)
{
    Stack S;
    S = malloc(sizeof(struct Node));
    S -> Next = NULL;
    MakeEmpty(S);
    return S;
}

void MakeEmpty(Stack S)
{
    if(S == NULL)
        printf("Please use CreateStack first!");
    else
        while(!IsEmpty(S))
            Pop(S);
}

void Push(ElementType X, Stack S)
{
    PtrToNode  TmpCell;
    TmpCell = malloc(sizeof(struct Node));
    TmpCell->Element = X;
    TmpCell->Next = S->Next;
    S->Next = TmpCell;
}

ElementType Pop(Stack S)
{
    PtrToNode TmpCell;
    if(IsEmpty(S))
    {
        printf("Error: Empty Stack");
        return NULL;
    }
    else
    {
        TmpCell = S->Next;
        S->Next = TmpCell->Next;
        ElementType X = TmpCell->Element;
        free(TmpCell);
        return X;
    }
}


int main()
{
    Stack S = CreateStack();
    int flag = 1;
    char str[100];
    gets(str);
    int len = strlen(str);
    for(int i = 0; i < len; i++)
    {
        if(str[i] == '(' || str[i] == '[' || str[i] == '{')             /* If the symbol is the left-half */
            Push(str[i], S);                                            /* Push the symbol to the Stack */
        else if(str[i] == ')' || str[i] == ']' || str[i] == '}')
        {
            if(IsEmpty(S))
                flag = 0;
            else                                                         /* Compare str[i] with the top of the stack */
            {                                                            /* if they don't match, the mistake happened */
                switch(str[i]){
                    case ')':
                        if(Pop(S) != '(')
                            flag = 0;
                        break;
                    case ']':
                        if(Pop(S) != '[')
                            flag = 0;
                        break;
                    case '}':
                        if(Pop(S) != '{')
                            flag = 0;
                        break;
                }
            }
        }
    }
    if(flag == 0)
        printf("The symbols are not balanced :(");
    else
        printf("The symbols are balanced :)");

    return 0;
}
