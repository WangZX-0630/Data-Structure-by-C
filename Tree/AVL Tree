#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct AvlNode;
typedef struct AvlNode *Position;
typedef struct AvlNode *AvlTree;

struct AvlNode {
    int Element;
    AvlTree Left;
    AvlTree Right;
    int Height;
};

static int Height(Position P) {
    if(P == NULL) {
        return -1;
    }
    else
        return P->Height;
}

AvlTree MakeEmpty(AvlTree T) {
    if(T != NULL) {
        MakeEmpty(T->Left);
        MakeEmpty(T->Right);
        free(T);
    }
    return NULL;
}

Position Find(int X, AvlTree T) {
    if(T == NULL) {
        return NULL;
    }
    else if(X < T->Element) {
        return Find(X, T->Left);
    }
    else if(X > T->Element) {
        return Find(X, T->Right);
    }
    else return T;
}

int Max(int a, int b) {
    return a > b ? a : b;
}

int abs(int a) {
    return a < 0 ? -a : a;
}

static Position SingleRotateWithLeft(Position K2) {
    Position K1 = K2->Left;
    K2->Left = K1->Right;
    K1->Right = K2;
    K2->Height = Max(Height(K2->Left), Height(K2->Right)) + 1;
    K1->Height = Max(Height(K1->Left), Height(K2)) + 1;
    return K1;
}

static Position SingleRotateWithRight(Position K2) {
    Position K1 = K2->Right;
    K2->Right = K1->Left;
    K1->Left = K2;
    K2->Height = Max(Height(K2->Left), Height(K2->Right)) + 1;
    K1->Height = Max(Height(K1->Right), Height(K2)) + 1;
    return K1;
}

static Position DoubleRotateWithLeft(Position K3) {
    K3->Left = SingleRotateWithRight(K3->Left);
    K3 = SingleRotateWithLeft(K3);
    return K3;
}

static Position DoubleRotateWithRight(Position K3) {
    K3->Right = SingleRotateWithLeft(K3->Right);
    K3 = SingleRotateWithRight(K3);
    return K3;
}

AvlTree Insert(int X, AvlTree T) {
    if(T == NULL) {
        T = malloc(sizeof(struct AvlNode));
        T->Element = X;
        T->Left = T->Right = NULL;
        T->Height = 0;
    }
    else if(T != NULL) {
        if(X < T->Element) {
            T->Left = Insert(X, T->Left);
            T->Height = T->Left->Height + 1;
        }
        else if(X > T->Element) {
            T->Right = Insert(X, T->Right);
            T->Height = T->Right->Height + 1;
        }
    }
    if(abs(Height(T->Left) - Height(T->Right)) > 1) {
        if(Height(T->Left) > Height(T->Right)) {
            if(Height(T->Left->Left) < Height(T->Left->Right)) {
                T = DoubleRotateWithLeft(T);
            }
            else {
                T = SingleRotateWithLeft(T);
            }
        }
        else {
            if(Height(T->Right->Right) < Height(T->Right->Left)) {
                T = DoubleRotateWithRight(T);
            }
            else {
                T = SingleRotateWithRight(T);
            }
        }
    }
    return T;
}

void PreOrder(AvlTree T) {
    if(T != NULL) {
        printf("%d,", T->Element);
        PreOrder(T->Left);
        PreOrder(T->Right);
    }
}

int main()
{
    AvlTree T = NULL;
    char str[100];
    gets(str);
    int nums = 0;
    int strlength = (int)strlen(str);
    for(int i = 0; i < strlength; i++) {
        if(str[i] >= '0' && str[i] <= '9') {
            nums = nums * 10 + str[i] - '0';
        }
        else if(str[i] == ',') {
            T = Insert(nums, T);
            nums = 0;
        }
    }
    
    PreOrder(T);
    return 0;
}
